{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../src/many-to-many.js"
  ],
  "names": [
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "require",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "1",
    "module",
    "ManyToMany",
    "$q",
    "$compile",
    "$timeout",
    "$uibModal",
    "controller",
    "$scope",
    "$element",
    "$attrs",
    "$transclude",
    "replaceLabels",
    "replaceLeft",
    "concat",
    "ctrl",
    "fields",
    "left",
    "replaceRight",
    "right",
    "slice",
    "document",
    "getElementsByName",
    "forEach",
    "label",
    "index",
    "angular",
    "element",
    "replaceWith",
    "scope",
    "div",
    "hasKeyInModalFields",
    "key",
    "modalFields",
    "replace",
    "split",
    "filter",
    "obj",
    "escapeRegExp",
    "str",
    "replaceAll",
    "find",
    "RegExp",
    "this",
    "authorizeAdd",
    "boxHeight",
    "textHeadingLeft",
    "textHeadingRight",
    "textMoveallLeft",
    "textMoveallRight",
    "textLeftEmpty",
    "textRightEmpty",
    "textLeftPlaceholder",
    "textRightPlaceholder",
    "validateMessage",
    "hasInvalid",
    "textLeft",
    "textRight",
    "rightList",
    "rightAux",
    "copy",
    "leftList",
    "rightSearchField",
    "eventHandler",
    "listChange",
    "onListChange",
    "noop",
    "validateItem",
    "newValueAdded",
    "onNewValueAdded",
    "valueVisualizationOpened",
    "onValueVisualizationOpened",
    "valueVisualizationClosed",
    "onValueVisualizationClosed",
    "filterLeft",
    "q",
    "leftSearch",
    "param",
    "$watch",
    "data",
    "removeDuplicates",
    "filterRight",
    "toLowerCase",
    "indexOf",
    "moveAllItems",
    "fromList",
    "toList",
    "position",
    "validList",
    "value",
    "splice",
    "rightsearch",
    "leftsearch",
    "openModal",
    "event",
    "stopImmediatePropagation",
    "template",
    "hasOwnProperty",
    "open",
    "size",
    "$value",
    "$uibModalInstance",
    "back",
    "close",
    "resolve",
    "result",
    "then",
    "removeOrAdd",
    "removeFrom",
    "addTo",
    "push",
    "target",
    "classList",
    "toggle",
    "setTimeout",
    "addNew",
    "postMethod",
    "hasObjectInRight",
    "rightObject",
    "equals",
    "leftListAux",
    "cloneEl",
    "cl",
    "nodeName",
    "innerHTML",
    "elementLeft",
    "getElementById",
    "elementRight",
    "checkErrors",
    "errorTexts",
    "txt",
    "console",
    "error",
    "$inject",
    "restrict",
    "rightSearch",
    "bindToController",
    "transclude",
    "controllerAs",
    "directive"
  ],
  "mappings": "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",
  "file": "gumga-many-to-many.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function () {\n  'use strict';\n\n\n  ManyToMany.$inject = ['$q', '$compile', '$timeout', '$uibModal']\n\n  function ManyToMany($q, $compile, $timeout, $uibModal) {\n\n    let template = `\n    <div class=\"row\">\n      <div class=\"col-md-6 col-xs-6\">\n        <div class=\"navbar\">\n          <label ng-hide=\"ctrl.leftListAux.length > 0\">{{ctrl.textLeftEmpty}}</label>\n          <label ng-show=\"ctrl.leftListAux.length > 0\" id=\"textinfoleft\"></label>\n          <div ng-class=\"leftsearch && ctrl.leftListAux.length == 0 && ctrl.authorizeAdd ? 'input-group' : ''\">\n            <input class=\"form-control gmd input-sm\" placeholder=\"{{ctrl.textLeftPlaceholder}}\" ng-change=\"ctrl.filterLeft(leftsearch)\" ng-model=\"leftsearch\"/>\n            <span class=\"bar\"></span>\n            <div ng-click=\"ctrl.addNew(leftsearch)\" ng-show=\"leftsearch && ctrl.leftListAux.length == 0 && ctrl.authorizeAdd\" class=\"input-group-addon hover\">\n              <i class=\"glyphicon glyphicon-plus\"></i>\n            </div>\n          </div>\n        </div>\n        <div class=\"panel gmd\">\n          <div class=\"panel-heading \">{{ctrl.textHeadingLeft}}</div>\n          <ul class=\"list-group\" style=\"height: {{ctrl.boxHeight}};max-height:{{ctrl.boxHeight}};overflow: auto;\">\n            <li class=\"list-group-item hover\" ng-repeat=\"$value in ctrl.leftListAux track by $index\" ng-click=\"ctrl.removeOrAdd(ctrl.leftListAux, ctrl.rightList, $value, $index, $event)\">\n              <span name=\"fieldleft\"></span>\n            </li>\n          </ul>\n          <div class=\"panel-footer hover\" style=\"text-align: center;\" ng-click=\"ctrl.moveAllItems(ctrl.leftListAux, ctrl.rightList, 'right')\" ng-disabled=\"ctrl.leftListAux.length == 0\">\n            {{ctrl.textMoveallLeft}}\n            <span class=\"glyphicon glyphicon-arrow-right\"></span>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-6 col-xs-6\">\n        <div class=\"navbar\">\n          <label ng-hide=\"ctrl.rightList.length > 0\">{{ctrl.textRightEmpty}}</label>\n          <label ng-show=\"ctrl.rightList.length > 0\" id=\"textinforight\"></label>\n          <input class=\"form-control input-sm gmd\" ng-disabled=\"!ctrl.rightSearchField\" placeholder=\"{{ctrl.textRightPlaceholder}}\" ng-change=\"ctrl.filterRight(rightsearch)\" ng-model=\"rightsearch\"/>\n          <span class=\"bar\"></span>\n        </div>\n        <div class=\"panel gmd\">\n          <div class=\"panel-heading \">{{ctrl.textHeadingRight}}</div>\n          <ul class=\"list-group\" ng-cloak style=\"height: {{ctrl.boxHeight}};max-height:{{ctrl.boxHeight}};overflow: auto;\">\n            <li class=\"list-group-item hover\" ng-repeat=\"$value in ctrl.rightAux track by $index\" ng-click=\"ctrl.removeOrAdd(ctrl.rightList, ctrl.leftListAux, $value, $index)\">\n              <span name=\"fieldright\">{{$value}}</span>\n            </li>\n          </ul>\n          <div class=\"panel-footer hover\" style=\"text-align: center;\" ng-click=\"ctrl.moveAllItems(ctrl.rightList, ctrl.leftListAux, 'left')\" ng-disabled=\"ctrl.rightAux.length == 0\">\n            <span class=\"glyphicon glyphicon-arrow-left\"></span> {{ctrl.textMoveallRight}}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-12\" ng-show=\"ctrl.hasInvalid\">\n        <p class=\"alert alert-danger\">{{ ctrl.validateMessage }}</p>\n      </div>\n    </div>`\n    controller.$inject = ['$scope', '$element', '$attrs', '$transclude']\n\n    function controller($scope, $element, $attrs, $transclude) {\n      let ctrl = this;\n      ctrl.fields = {};\n      if (!$attrs.authorizeAdd) ctrl.authorizeAdd = true;\n      ctrl.modalFields = $attrs.modalFields || '';\n      ctrl.boxHeight = $attrs.boxHeight || '298px';\n      ctrl.textHeadingLeft = $attrs.textHeadingLeft || 'Available';\n      ctrl.textHeadingRight = $attrs.textHeadingRight || 'Selected';\n      ctrl.textMoveallLeft = $attrs.textMoveallLeft || 'Move all items';\n      ctrl.textMoveallRight = $attrs.textMoveallRight || 'Move all items';\n      ctrl.textLeftEmpty = $attrs.textLeftEmpty || 'Empty List';\n      ctrl.textRightEmpty = $attrs.textRightEmpty || 'Empty List';\n      ctrl.textLeftPlaceholder = $attrs.textLeftPlaceholder || 'Filter';\n      ctrl.textRightPlaceholder = $attrs.textRightPlaceholder || 'Filter';\n      ctrl.validateMessage = $attrs.validateMessage || 'Invalid item';\n      ctrl.hasInvalid = false;\n      ctrl.textLeft = $attrs.textLeft || 'Showing {{$value}} {{$value > 1 ? \\'items\\': \\'item\\'}}';\n      ctrl.textRight = $attrs.textRight || 'Showing {{$value}} {{$value > 1 ? \\'items\\': \\'item\\'}}';\n      ctrl.rightList = ctrl.rightList || [];\n      ctrl.rightAux = angular.copy(ctrl.rightList);\n      ctrl.leftList = ctrl.leftList || [];\n      ctrl.rightSearchField = $attrs.rightSearchField || null;\n      let eventHandler = {\n        listChange: ($attrs.onListChange ? ctrl.onListChange : angular.noop),\n        validateItem: ($attrs.validateItem ? ctrl.validateItem : () => { return true }),\n        newValueAdded: ($attrs.onNewValueAdded ? ctrl.onNewValueAdded : angular.noop),\n        valueVisualizationOpened: ($attrs.onValueVisualizationOpened ? ctrl.onValueVisualizationOpened : angular.noop),\n        valueVisualizationClosed: ($attrs.onValueVisualizationClosed ? ctrl.onValueVisualizationClosed : angular.noop)\n      };\n\n      ctrl.filterLeft = function (q) {\n        ctrl.leftSearch({ param: q });\n      }\n\n      $scope.$watch('ctrl.leftList', function (data) {\n        replaceLabels();\n        ctrl.removeDuplicates();\n      })\n\n      $scope.$watch('ctrl.rightList', function (data) {\n        ctrl.rightAux = angular.copy(ctrl.rightList);\n        replaceLabels();\n      }, true)\n\n      ctrl.filterRight = function (param) {\n        if (ctrl.rightSearchField) ctrl.rightAux = ctrl.rightList.filter(obj => obj[ctrl.rightSearchField].toLowerCase().indexOf(param.toLowerCase()) > -1);\n        ctrl.removeDuplicates();\n        replaceLabels();\n      }\n\n      ctrl.moveAllItems = function (fromList, toList, position) {\n        let validList = fromList.filter(value => {\n          return eventHandler.validateItem({ value: value })\n        })\n        if (fromList.length > validList.length) ctrl.hasInvalid = true;\n        if (position == \"left\") ctrl.leftList = toList.concat(validList);\n        if (position == \"right\") ctrl.rightList = toList.concat(validList);\n        fromList.splice(0, fromList.length);\n        ctrl.rightAux = angular.copy(ctrl.rightList);\n        if (position == \"right\") ctrl.filterLeft('');\n        ctrl.removeDuplicates();\n        replaceLabels();\n        $scope.rightsearch = '';\n        $scope.leftsearch = '';\n      }\n\n      function replaceLabels() {\n        let replaceLeft = '<span name=\"fieldleft\"><span >'.concat(ctrl.fields.left).concat('</span><i ng-click=\"ctrl.openModal($event, $value)\" class=\"pull-right glyphicon glyphicon-exclamation-sign hover-icon-blue\"></i></span>');\n        let replaceRight = '<span name=\"fieldright\"><span>'.concat(ctrl.fields.right).concat('</span><i ng-click=\"ctrl.openModal($event, $value)\" class=\"pull-right glyphicon glyphicon-exclamation-sign hover-icon-blue\"></i></span>');\n        $timeout(() => {\n          [].slice.call(document.getElementsByName('fieldleft')).forEach((label, index) => {\n            angular.element(label).replaceWith($compile(replaceLeft)(angular.element(label).scope()));\n          });\n          [].slice.call(document.getElementsByName('fieldright')).forEach((div, index) => {\n            angular.element(div).replaceWith($compile(replaceRight)(angular.element(div).scope()));\n          });\n        })\n      }\n\n      function hasKeyInModalFields(key) {\n        return ctrl.modalFields.replace(/\\s/g, '').split(',').filter(obj => {\n          return obj == key;\n        }).length > 0;\n      }\n\n      ctrl.openModal = function (event, obj) {\n        event.stopImmediatePropagation();\n        ctrl.template =\n        '<div class=\"modal-body\">\\n';\n        for (var key in obj) if (obj.hasOwnProperty(key) && key != '$$hashKey' && key != 'oi' && key != 'version') {\n          if (hasKeyInModalFields(key) || !ctrl.modalFields) {\n            ctrl.template += '  <div class=\"form-group\">\\n';\n            ctrl.template += '    <label><small>' + key + '</small></label>\\n';\n            ctrl.template += '    <input type=\"text\" ng-model=\"$value.' + key + '\" disabled class=\"form-control\"/>\\n';\n            ctrl.template += '  </div>\\n';\n          }\n        }\n        ctrl.template += '   <div class=\"modal-footer\">\\n';\n        ctrl.template += '       <button type=\"button\" class=\"btn btn-warning\" ng-click=\"back()\">Back</button>\\n';\n        ctrl.template += '   </div>\\n';\n        ctrl.template += '</div>\\n';\n\n        eventHandler.valueVisualizationOpened();\n        var mi = $uibModal.open({\n          template: ctrl.template,\n          size: 'sm',\n          controller: ['$scope', '$value', '$uibModalInstance', function ($scope, $value, $uibModalInstance) {\n            $scope.$value = $value;\n            $scope.back = function () {\n              $uibModalInstance.close();\n            }\n          }],\n          resolve: {\n            $value: function () {\n              return obj;\n            }\n          }\n        });\n\n        mi.result.then(function () {\n          eventHandler.valueVisualizationClosed();\n        })\n      }\n      ctrl.removeOrAdd = function (removeFrom, addTo, value, index, event) {\n        if (eventHandler.validateItem({ value: value })) {\n          removeFrom.splice(index, 1);\n          addTo.push(value);\n          replaceLabels();\n          ctrl.removeDuplicates();\n          ctrl.rightAux = angular.copy(ctrl.rightList);\n          $scope.rightsearch = '';\n          eventHandler.listChange({ value: value });\n        } else {\n          event.target.classList.toggle('invalid')\n          setTimeout(() => {\n            event.target.classList.toggle('invalid')\n          }, 1000)\n          ctrl.hasInvalid = true;\n        }\n      }\n\n      ctrl.addNew = function (value) {\n        $scope.leftsearch = '';\n        ctrl.postMethod({ value: value });\n        ctrl.filterLeft('');\n        eventHandler.newValueAdded();\n      }\n\n      function checkErrors() {\n        let errorTexts = [];\n        if (!ctrl.fields.left || !ctrl.fields.right) {\n          errorTexts.push('You have\\'nt provided the content to GumgaManyToMany directive.');\n        }\n        if (!$attrs.leftSearch) errorTexts.push('You need to enter the parameter left-search.');\n        if (!$attrs.rightList) errorTexts.push('You need to enter the parameter right-list.');\n        errorTexts.forEach(function (txt) {\n          console.error(txt);\n        });\n      }\n\n      const hasObjectInRight = obj => (ctrl.rightList.filter(rightObject => angular.equals(rightObject, obj)).length > 0);\n\n\n      ctrl.removeDuplicates = function () {\n        ctrl.leftListAux = ctrl.leftList.filter(obj => !hasObjectInRight(obj))\n      }\n\n      $transclude($scope, cloneEl => {\n        angular.forEach(cloneEl, cl => {\n          let element = angular.element(cl)[0];\n          switch (element.nodeName) {\n            case 'LEFT-FIELD': ctrl.fields.left = element.innerHTML;\n              break;\n            case 'RIGHT-FIELD': ctrl.fields.right = element.innerHTML;\n              break;\n          }\n        });\n      })\n\n      function escapeRegExp(str) {\n\t\t\t\t    return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n      }\n\n      function replaceAll(str, find, replace) {\n        return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n      }\n\n      $timeout(() => {\n        let elementLeft = angular.element(document.getElementById('textinfoleft'));\n        elementLeft.replaceWith($compile('<label ng-show=\"ctrl.leftListAux.length > 0\">' + replaceAll(ctrl.textLeft, '$value', 'ctrl.leftListAux.length') + '</label>')(elementLeft.scope()));\n        let elementRight = angular.element(document.getElementById('textinforight'));\n        elementRight.replaceWith($compile('<label ng-show=\"ctrl.rightList.length > 0\">' + replaceAll(ctrl.textRight, '$value', 'ctrl.rightAux.length') + '</label>')(elementRight.scope()));\n      })\n\n      checkErrors();\n      replaceLabels();\n      ctrl.filterLeft('');\n    }\n\n    return {\n      restrict: 'E',\n      scope: {\n        rightList: '=rightList',\n        leftList: '=leftList',\n        leftSearch: '&leftSearch',\n        rightSearch: '&rightSearch',\n        postMethod: '&',\n        validateItem: '&?',\n        onListChange: '&?',\n        onNewValueAdded: '&?',\n        onValueVisualizationOpened: '&?',\n        onValueVisualizationClosed: '&?',\n        authorizeAdd: '=?'\n      },\n      bindToController: true,\n      transclude: true,\n      controllerAs: 'ctrl',\n      controller,\n      template\n    }\n  }\n\n\n  angular.module('gumga.manytomany', ['ui.bootstrap'])\n    .directive('gumgaManyToMany', ManyToMany)\n})();\n"
  ]
}