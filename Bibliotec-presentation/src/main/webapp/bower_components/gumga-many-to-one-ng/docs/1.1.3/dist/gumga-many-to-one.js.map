{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../src/many-to-one.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function(){\n    'use strict';\n\n    ManyToOne.$inject = ['$templateCache','$uibModal', '$compile', '$timeout'];\n\n    function ManyToOne($templateCache, $uibModal, $compile, $timeout){\n        controller.$inject = ['$scope', '$element', '$attrs', '$transclude'];\n\n        function controller($scope, $element, $attrs, $transclude){\n          let manyToOneCtrl = this, ngModelCtrl, ngModelCtrlReset\n\n          const ERR_MSGS = {\n            noValue: 'É necessário um atributo value no componente gumgaManyToOne',\n            noField: 'É necessário um atributo field no componente gumgaManyToOne',\n            noSearch: 'É necessário uma função de busca no componente gumgaManyToOne'\n          }\n\n          const possibleAttributes  = ['loadingText', 'onSelect', 'value', 'list', 'searchMethod', 'field', 'onNewValueAdded', 'onValueSelected', 'onValueVisualizationOpened', 'onValueVisualizationClosed', 'tabindex']\n\n          let template = false\n\n          if(!$attrs.value)        console.error(ERR_MSGS.noValue)\n          if(!$attrs.field)        console.error(ERR_MSGS.noField)\n          // if(!$attrs.searchMethod) console.error(ERR_MSGS.noSearch)\n\n          manyToOneCtrl.ev                            = {}\n          manyToOneCtrl.list                          = manyToOneCtrl.list                                                    || []\n          manyToOneCtrl.ev.onNewValueAdded            = $attrs.onNewValueAdded            ? manyToOneCtrl.onNewValueAdded     : angular.noop\n          manyToOneCtrl.ev.onSelect                   = $attrs.onSelect                   ? manyToOneCtrl.onSelect            : angular.noop\n          manyToOneCtrl.ev.onValueVisualizationOpened = $attrs.onValueVisualizationOpened ? $attrs.onValueVisualizationOpened : angular.noop\n          manyToOneCtrl.ev.onValueVisualizationClosed = $attrs.onValueVisualizationClosed ? $attrs.onValueVisualizationClosed : angular.noop\n          manyToOneCtrl.field                         = $attrs.field                                               || ''\n          // manyToOneCtrl.description                   = $attrs.description                                         || false\n          manyToOneCtrl.modalTitle                    = $attrs.modalTitle                                          || 'Visualizador de Registro'\n          manyToOneCtrl.modalFields                   = $attrs.modalFields  ? $attrs.modalFields.split(',')         : [manyToOneCtrl.field]\n          manyToOneCtrl.postFields                    = $attrs.postFields   ? $attrs.postFields.split(',')          : [manyToOneCtrl.field]\n          manyToOneCtrl.displayClear                  = manyToOneCtrl.hasOwnProperty('displayClear') ? manyToOneCtrl.displayClear : true\n          manyToOneCtrl.displayInfo                   = manyToOneCtrl.hasOwnProperty('displayInfo')  ? manyToOneCtrl.displayInfo  : true\n          manyToOneCtrl.editable                      = manyToOneCtrl.hasOwnProperty('editable')     ? manyToOneCtrl.editable     : true\n          manyToOneCtrl.async                         = manyToOneCtrl.hasOwnProperty('async')        ? manyToOneCtrl.async        : true\n          // manyToOneCtrl.showDescripion                = !!manyToOneCtrl.description\n\n          function mirrorAttributes(){\n            const isOneOfPossibles = attribute => possibleAttributes.filter(value => attribute == value).length > 0;\n            return Object.keys($attrs.$attr).filter((value) => !isOneOfPossibles(value)).reduce((prev, next) => prev += `${next}=\"${$attrs[next]}\"`, '');\n          }\n\n          manyToOneCtrl.displayInfoButton   = displayInfoButton\n          manyToOneCtrl.modelValueIsObject  = modelValueIsObject\n          manyToOneCtrl.disabledDisplayInfo = disabledDisplayInfo\n          manyToOneCtrl.displayPlusButton   = displayPlusButton\n          manyToOneCtrl.displayClearButton  = displayClearButton\n          manyToOneCtrl.clearModel          = clearModel\n          manyToOneCtrl.openInfo            = openInfo\n          manyToOneCtrl.valueToAdd          = ''\n          manyToOneCtrl.afterSelect         = afterSelect\n          manyToOneCtrl.openTypehead         = openTypehead\n          manyToOneCtrl.showTypeheadAndHideMatch         = showTypeheadAndHideMatch\n\n          manyToOneCtrl.proxySearch = (param) => {\n            if (!manyToOneCtrl.async) {\n              if (param) param = param.toLowerCase()\n              return manyToOneCtrl.list.filter(listItem => listItem[manyToOneCtrl.field].toLowerCase().indexOf(param) > -1)\n            } else {\n              param = param || ''\n              return manyToOneCtrl.searchMethod({ param }).then(data => {\n                if(data.filter(dataItem => dataItem[manyToOneCtrl.field] == param).length > 0 || !manyToOneCtrl.authorizeAdd){\n                  return data\n                }\n                let objToAppend = {}\n                objToAppend[manyToOneCtrl.field] = manyToOneCtrl.valueToAdd;\n\n                return data.concat(objToAppend)\n              })\n            }\n          }\n\n          manyToOneCtrl.proxySave  = (val, abc) => {\n            if(!abc) return\n            manyToOneCtrl.isTypeaheadOpen = true;\n            const controllerAs = 'ctrl'\n            const resolve = { value: () => val }\n            controller.$inject = ['$scope','$uibModalInstance', 'value']\n            function controller($scope, $uibModalInstance, value){\n              let ctrl = this;\n              ctrl.object = value\n              ctrl.cancel = obj => $uibModalInstance.dismiss('cancel');\n              ctrl.save   = obj => $uibModalInstance.close(obj);\n            }\n\n            function mountModalBody(){\n              let fields = manyToOneCtrl.postFields\n              return fields.reduce((prev, next) => {\n                return prev += `\n                <div class=\"form-group\">\n                  <label>${next}</label>\n                  <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.object.${next}\" />\n                </div>`\n              }, ' ')\n            }\n\n            let template = `\n              <div class=\"modal-header\">\n                <h3 class=\"modal-title\">${manyToOneCtrl.modalTitle}</h3>\n              </div>\n              <div class=\"modal-body\">\n                ${mountModalBody()}\n              </div>\n              <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"ctrl.cancel(ctrl.object)\">Retornar</button>\n                <button type=\"button\" class=\"btn btn-primary\" ng-click=\"ctrl.save(ctrl.object)\">Salvar</button>\n              </div>`\n\n\n            $uibModal\n              .open({ controller, template, controllerAs, resolve })\n              .result\n              .then(value => {\n                      manyToOneCtrl.postMethod({ value }).then(\n                        dataFromPostMethod => {\n                          manyToOneCtrl.value = dataFromPostMethod.data.data\n                          ngModelCtrl.$viewValue = dataFromPostMethod.data.data\n                        }\n                      )\n                    }, reject => manyToOneCtrl.value = '')\n\n          }\n\n          function displayClearButton(){\n            return manyToOneCtrl.displayClear\n          }\n\n          function displayInfoButton(){\n            return manyToOneCtrl.displayInfo\n          }\n\n          function modelValueIsObject(){\n            if (manyToOneCtrl.disabled) return true\n            if (!manyToOneCtrl.value) return true;\n            return !(typeof manyToOneCtrl.value === 'object')\n          }\n\n          function disabledDisplayInfo(){\n            return !(typeof manyToOneCtrl.value === 'object')\n          }\n\n          function clearModel(){\n            manyToOneCtrl.visible = 'typeahead';\n            delete manyToOneCtrl.value;\n          }\n\n          function openTypehead(){\n            if(manyToOneCtrl.isTypeaheadOpen) return;\n            document.getElementById('typeahead-' + manyToOneCtrl.field + '-' + $attrs.value).focus();\n          }\n\n          function showTypeheadAndHideMatch(){\n            manyToOneCtrl.visible = 'typeahead'\n\n            $timeout(()=>{\n              manyToOneCtrl.value = angular.copy(manyToOneCtrl.inputMatchValue);\n              openTypehead();\n              delete manyToOneCtrl.inputMatchValue;\n            })\n\n          }\n\n          manyToOneCtrl.isTypeaheadOpen = true;\n\n          function displayPlusButton(){\n            return manyToOneCtrl.postMethod\n                && (typeof ngModelCtrl.$$rawModelValue === 'string' || ngModelCtrl.$$rawModelValue instanceof String)\n                && ngModelCtrl.$$rawModelValue.length > 0\n          }\n\n          function handlingInputVisible(){\n            if(manyToOneCtrl.inputMatch){\n              let span = document.getElementById('match-'+manyToOneCtrl.field+'-'+$attrs.value);\n              let inputMatch = manyToOneCtrl.inputMatch.replace(/{/g, '{{').replace(/}/g, '}}').replace(/item/g, 'manyToOneCtrl.value');\n              let update = '<span style=\"display: none;\" id=\"match-'+manyToOneCtrl.field+'-'+$attrs.value+'\">'+inputMatch+'</span>';\n              angular.element(span).replaceWith($compile(update)($scope))\n              $timeout(() => {\n                let content = document.getElementById('match-'+manyToOneCtrl.field+'-'+$attrs.value);\n                manyToOneCtrl.inputMatchValue = content.innerHTML;\n                manyToOneCtrl.visible = 'inputMatchValue';\n              });\n            }else{\n              manyToOneCtrl.visible = 'typeahead';\n            }\n          }\n\n          function afterSelect($item, $model, $label, $event, isBtn, match){\n            handlingInputVisible();\n            if(!$model.id) manyToOneCtrl.proxySave($model, isBtn);\n            if(manyToOneCtrl.ev.onSelect) manyToOneCtrl.ev.onSelect({value: $model});\n          }\n\n          function openInfo(object = {}, $event) {\n\n            manyToOneCtrl.isTypeaheadOpen = true;\n            $event.stopImmediatePropagation()\n            $event.preventDefault()\n            controller.$inject = ['$scope','$uibModalInstance']\n\n            function controller($scope, $uibModalInstance){\n              $scope.close = () => $uibModalInstance.close()\n            }\n\n            function mountModalBody(){\n              let fields = manyToOneCtrl.modalFields\n              return fields.reduce((prev, next) => {\n                return prev += `\n                <div class=\"form-group\">\n                  ${ (typeof object[next] === 'string' || object[next] instanceof String) ? `<label>${next}</label>` : ' '}\n                  ${ (typeof object[next] === 'string' || object[next] instanceof String) ? `<input type=\"text\" class=\"form-control\" value=\"${object[next]}\" disabled />` : ' '}\n                </div>`\n              }, ' ')\n            }\n\n            let template = `\n            <div class=\"modal-header\">\n              <h3 class=\"modal-title\">${manyToOneCtrl.modalTitle}</h3>\n            </div>\n            <div class=\"modal-body\">\n              ${mountModalBody()}\n            </div>\n            `\n            $uibModal.open({ controller, template })\n\n          }\n\n          $transclude($scope, cloneEl => {\n            angular.forEach(cloneEl, cl => {\n              let element = angular.element(cl)[0];\n              if (element.nodeName && element.nodeName === 'MATCH') {\n                template = true\n                manyToOneCtrl.match = element.innerHTML\n              }\n            });\n          })\n\n          /*  */\n          let baseTemplate = `\n          <div>\n            <div ng-class=\"{'input-group': (manyToOneCtrl.displayInfoButton() && manyToOneCtrl.modelValueIsObject()) || manyToOneCtrl.displayClearButton()}\">\n              <input type=\"text\" ng-init=\"manyToOneCtrl.visible = 'typeahead'\" ng-show=\"manyToOneCtrl.visible == 'typeahead'\" id=\"typeahead-${manyToOneCtrl.field}-${$attrs.value}\" class=\"form-control gmd inputahead\" tabindex=\"${manyToOneCtrl.tabSeq}\" ng-disabled=\"manyToOneCtrl.disabled\" ng-readonly=\"manyToOneCtrl.readonly\" ng-model=\"manyToOneCtrl.value\" ng-trim=\"true\" uib-typeahead=\"$value as $value[manyToOneCtrl.field] for $value in manyToOneCtrl.proxySearch($viewValue)\" typeahead-loading=\"manyToOneCtrl.typeaheadLoading\" ${mirrorAttributes()}\n                     typeahead-template-url=\"manyToOneTemplate${manyToOneCtrl.field}-${$attrs.value}.html\" typeahead-is-open=\"manyToOneCtrl.isTypeaheadOpen\" typeahead-editable=\"${manyToOneCtrl.editable}\" typeahead-show-hint=\"true\" typeahead-min-length=\"0\" typeahead-on-select=\"manyToOneCtrl.afterSelect($item, $model, $label, $event, 'isNotButton', manyToOneCtrl.match)\" autocomplete=\"off\"/>\n              <input type=\"text\" ng-keyup=\"manyToOneCtrl.showTypeheadAndHideMatch()\" ng-model=\"manyToOneCtrl.inputMatchValue\" class=\"form-control\" ng-show=\"manyToOneCtrl.visible == 'inputMatchValue'\"/>\n              <div ng-show=\"manyToOneCtrl.typeaheadLoading && manyToOneCtrl.loadingText\" style=\"position: absolute; top: 40px;\">\n                <i class=\"glyphicon glyphicon-refresh\"></i>\n                {{manyToOneCtrl.loadingText}}\n              </div>\n              <span ng-hide=\"true\" id=\"match-${manyToOneCtrl.field}-${$attrs.value}\"></span>\n              <div class=\"input-group-btn input-group-btn-icon\" ng-show=\"(manyToOneCtrl.displayInfoButton() && manyToOneCtrl.modelValueIsObject()) || manyToOneCtrl.displayClearButton()\">\n                <button type=\"button\" class=\"btn btn-default gmd\" ng-show=\"!manyToOneCtrl.modelValueIsObject() && manyToOneCtrl.displayClearButton()\" ng-click=\"manyToOneCtrl.clearModel()\">\n                  <span class=\"glyphicon glyphicon-remove\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default gmd\"\n                        ng-show=\"manyToOneCtrl.modelValueIsObject() && manyToOneCtrl.displayClearButton()\"\n                        ng-click=\"manyToOneCtrl.openTypehead()\">\n                  <span class=\"{{!manyToOneCtrl.isTypeaheadOpen ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}}\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default gmd\" ng-show=\"!manyToOneCtrl.modelValueIsObject() && manyToOneCtrl.displayInfoButton()\" ng-disabled=\"manyToOneCtrl.disabledDisplayInfo()\" ng-click=\"manyToOneCtrl.openInfo(manyToOneCtrl.value, $event)\">\n                  <span class=\"glyphicon glyphicon-info-sign\"></span>\n                </button>\n              </div>\n            </div>\n\n          </div>`\n\n\n          let templateForInnerMatch = (!template) ? `<span ng-bind-html=\"match.model.${manyToOneCtrl.field} | uibTypeaheadHighlight:query\"></span>` : `<span>${manyToOneCtrl.match}</span>`\n          let templateForMatch = `\n          <a class=\"col-md-12 result gmd\">\n            <span class=\"col-md-10 str\" ng-click=\"manyToOneCtrl.select()\">\n              ${templateForInnerMatch}\n              <span ng-show=\"$parent.$parent.$parent.$parent.manyToOneCtrl.valueToAdd == match.label && $parent.$parent.$parent.$parent.manyToOneCtrl.valueToAdd.length > 0 && !match.model.id && !!$parent.$parent.$parent.$parent.manyToOneCtrl.authorizeAdd\">(novo)</span><br>\n            </span>\n            <span class=\"col-md-2\">\n              <span class=\"icon text-right\" ng-if=\"${manyToOneCtrl.displayInfo}\" ng-click=\"$parent.$parent.$parent.$parent.manyToOneCtrl.openInfo(match.model, $event)\" ng-hide=\"$parent.$parent.$parent.$parent.manyToOneCtrl.valueToAdd == match.label && !match.label.id\">\n                <span class=\"glyphicon glyphicon-info-sign\"></span>\n              </span>\n            </span>\n            <div class=\"clearfix\"></div>\n          </a>`\n\n          $templateCache.put(`manyToOneTemplate${manyToOneCtrl.field}-${$attrs.value}.html`, templateForMatch)\n\n          let element = angular.element(baseTemplate),\n              input   = element.find('input'),\n              form    = $element.parent()\n          while(form[0].nodeName != 'FORM') form = form.parent();\n          let formController = $scope.$parent[form.attr('name')]\n\n          $element.append($compile(element)($scope))\n\n          ngModelCtrl       = input.controller('ngModel')\n          ngModelCtrlReset  = angular.copy(ngModelCtrl)\n\n          formController.$addControl(ngModelCtrl)\n\n          ngModelCtrl.$viewChangeListeners.push(() => {\n            // console.log('$viewChangeListeners', ngModelCtrl.$viewValue)\n          })\n          ngModelCtrl.$validators.manyToOne = (modelValue, viewValue) => {\n            return modelValue ? !(typeof modelValue === 'string' || modelValue instanceof String) : true\n          }\n\n          if(!modelValueIsObject()){\n             handlingInputVisible();\n          }\n\n          $scope.$watch(() => ngModelCtrl.$$rawModelValue, (i) => (manyToOneCtrl.valueToAdd = ngModelCtrl.$$rawModelValue))\n        }\n\n        return {\n            restrict : 'E',\n            replace: true,\n            transclude: true,\n            scope : {\n              value:            '=',\n              loadingText:      '@?',\n              inputMatch:       '@?',\n              searchMethod:     '&',\n              postMethod:       '&?',\n              onSelect:         '&?',\n              list:             '=?',\n              authorizeAdd:     '=?',\n              disabled:         '=?',\n              readonly:         '=?',\n              displayInfo:      '=?',\n              displayClear:     '=?',\n              editable:         '=?',\n              tabSeq:           '=?',\n              async:            '=?'\n            },\n            controllerAs: 'manyToOneCtrl',\n            bindToController: true,\n            controller\n        }\n    }\n    angular.module('gumga.manytoone', ['ui.bootstrap'])\n      .directive('gumgaManyToOne', ManyToOne);\n})();\n"
  ]
}