{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../src/many-to-one.js"
  ],
  "names": [
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "require",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "1",
    "module",
    "ManyToOne",
    "$templateCache",
    "$uibModal",
    "$compile",
    "$timeout",
    "controller",
    "$scope",
    "$element",
    "$attrs",
    "$transclude",
    "displayClearButton",
    "manyToOneCtrl",
    "displayClear",
    "displayInfoButton",
    "displayInfo",
    "modelValueIsObject",
    "disabled",
    "value",
    "_typeof",
    "disabledDisplayInfo",
    "clearModel",
    "visible",
    "openTypehead",
    "isTypeaheadOpen",
    "document",
    "getElementById",
    "field",
    "focus",
    "showTypeheadAndHideMatch",
    "angular",
    "copy",
    "inputMatchValue",
    "displayPlusButton",
    "postMethod",
    "ngModelCtrl",
    "$$rawModelValue",
    "String",
    "handlingInputVisible",
    "inputMatch",
    "span",
    "replace",
    "update",
    "element",
    "replaceWith",
    "content",
    "innerHTML",
    "afterSelect",
    "$item",
    "$model",
    "$label",
    "$event",
    "isBtn",
    "match",
    "id",
    "proxySave",
    "ev",
    "onSelect",
    "openInfo",
    "$uibModalInstance",
    "close",
    "object",
    "arguments",
    "stopImmediatePropagation",
    "preventDefault",
    "$inject",
    "template",
    "modalTitle",
    "mountModalBody",
    "modalFields",
    "reduce",
    "prev",
    "next",
    "open",
    "this",
    "ERR_MSGS",
    "noValue",
    "noField",
    "noSearch",
    "possibleAttributes",
    "console",
    "error",
    "list",
    "onNewValueAdded",
    "noop",
    "onValueVisualizationOpened",
    "onValueVisualizationClosed",
    "split",
    "postFields",
    "hasOwnProperty",
    "editable",
    "async",
    "valueToAdd",
    "proxySearch",
    "param",
    "searchMethod",
    "then",
    "data",
    "filter",
    "dataItem",
    "authorizeAdd",
    "objToAppend",
    "concat",
    "toLowerCase",
    "listItem",
    "indexOf",
    "val",
    "abc",
    "ctrl",
    "cancel",
    "obj",
    "dismiss",
    "save",
    "resolve",
    "controllerAs",
    "result",
    "dataFromPostMethod",
    "$viewValue",
    "reject",
    "cloneEl",
    "forEach",
    "cl",
    "nodeName",
    "baseTemplate",
    "tabSeq",
    "mirrorAttributes",
    "isOneOfPossibles",
    "attribute",
    "Object",
    "keys",
    "$attr",
    "templateForInnerMatch",
    "templateForMatch",
    "put",
    "input",
    "find",
    "form",
    "parent",
    "formController",
    "$parent",
    "attr",
    "append",
    "$addControl",
    "$viewChangeListeners",
    "push",
    "$validators",
    "manyToOne",
    "modelValue",
    "viewValue",
    "$watch",
    "restrict",
    "transclude",
    "scope",
    "loadingText",
    "readonly",
    "bindToController",
    "directive"
  ],
  "mappings": "CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,SAAAC,UAAA,YAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,GAAAL,SAAAD,UAAA,YAAAA,OAAA,KAAA,GAAAH,GAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,MAAAa,GAAA,SAAAT,QAAAU,OAAAJ,whBCAA,WAAA,QAKIK,WAAAC,eAAAC,UAAAC,SAAAC,UAAA,QAGIC,YAAAC,OAAAC,SAAAC,OAAAC,aAAA,QAwHEC,sBAAA,MACSC,eAAPC,aAAA,QAGFC,qBAAA,MACSF,eAAPG,YAAA,QAGFC,sBAAA,GACMJ,cAAJK,SAA4B,OAAA,CAAA,KACvBL,cAALM,MAA0B,OAAA,CAAA,SAC1B,WAASC,QAAOP,cAAPM,QAAA,QAGXE,uBAAA,QACE,WAASD,QAAOP,cAAPM,QAAA,QAGXG,cAAAT,cACEU,QAAA,kBACOV,eAAPM,MAAA,QAGFK,gBAAA,GACKX,cAAHY,gBAAkC,MAAAC,UAClCC,eAAwB,aAAed,cAAfe,MAAA,IAA2ClB,OAAnES,OAAAU,QAAA,QAGFC,4BAAAjB,cACEU,QAAA,YAAAjB,SAES,WAAAO,cACPM,MAAsBY,QAAAC,KAAanB,cAAnCoB,iBAEAT,qBAAOX,eAAPoB,kBAAA,QAOJC,qBAAA,MACSrB,eAAAsB,aACC,gBAAOC,aAAPC,iBAAmDD,YAAAC,0BADpDC,UAEAF,YAAAC,gBAAAtC,OAFP,EAAA,QAKFwC,wBAAA,GACK1B,cAAH2B,WAA4B,CAAA,GACtBC,MAAOf,SAAAC,eAAwB,SAASd,cAATe,MAAA,IAAiClB,OAApES,OACIqB,WAAa3B,cAAA2B,WAAAE,QAAA,KAAA,MAAAA,QAAA,KAAA,MAAAA,QAAA,QAAjB,uBACIC,OAAS,0CAA0C9B,cAA1Ce,MAAA,IAAkElB,OAAlES,MAAA,KAAAqB,WAAb,SAAAT,SACAa,QAAAH,MAAAI,YAAkCxC,SAAAsC,QAAlCnC,SAAAF,SACS,WAAA,GACHwC,SAAUpB,SAAAC,eAAwB,SAASd,cAATe,MAAA,IAAiClB,OAAvES,MAAAN,eACAoB,gBAAgCa,QAAhCC,UAAAlC,cACAU,QAAA,wBAAAV,eAGFU,QAAA,YAAA,QAIJyB,aAAAC,MAAAC,OAAAC,OAAAC,OAAAC,MAAAC,OAEEf,uBAAIW,OAAJK,IAAe1C,cAAA2C,UAAAN,OAAAG,OACZxC,cAAA4C,GAAHC,UAA8B7C,cAAA4C,GAAAC,UAA2BvC,MAA3B+B,SAAA,QAGhCS,YAAA,QAOEpD,YAAAC,OAAAoD,mBAAApD,OACEqD,MAAe,WAAA,MAAMD,mBAANC,SAAA,GARDC,QAAAC,UAAAhE,OAAA,OAAA,KAAAgE,UAAA,GAAAA,UAAA,MAAaX,OAAAW,UAE7B,EAAAlD,eAAAY,iBAAA,EAAA2B,OACAY,2BAAAZ,OACAa,iBAAA1D,WACA2D,SAAqB,SAArB,oBAAA,IAiBIC,UAAA,mFAEwBtD,cAFxBuD,WAAA,kFAAA,QAXJC,kBAAA,MACexD,eAAbyD,YACOC,OAAc,SAAAC,KAAAC,MAAA,MACZD,OAAA,kEAED,gBAAOV,QAAPW,OAAoCX,OAAAW,eAArCnC,QAAA,UAAAmC,KAAA,WAFE,KAAA,wBAGD,gBAAOX,QAAPW,OAAoCX,OAAAW,eAArCnC,QAAA,kDAAyHwB,OAAzHW,MAAA,gBAHE,KAAP,4BADF,QASF,oCAAArE,WAQAsE,MAAiBnE,WAAFA,WAAc4D,SAA7BA,WAAA,GA1NEtD,eAAJ8D,KAA0BvC,gBAAA,GAEpBwC,UAAAC,QAAW,8DAAAC,QAAA,8DAAAC,SAAjB,iEAMMC,oBAAsB,cAAA,WAAA,QAAA,OAAA,eAAA,QAAA,kBAAA,kBAAA,6BAAA,6BAA5B,YAEIb,UAAA,CAEAzD,QAAJS,OAAyB8D,QAAAC,MAAcN,SAAdC,SACrBnE,OAAJkB,OAAyBqD,QAAAC,MAAcN,SAAdE,SAAAjE,cAGzB4C,MAAA5C,cACAsE,KAA8CtE,cAAAsE,SAAAtE,cAC9C4C,GAAA2B,gBAA8C1E,OAAA0E,gBAAoCvE,cAApCuE,gBAAwErD,QAAtHsD,KAAAxE,cACA4C,GAAAC,SAA8ChD,OAAAgD,SAAoC7C,cAApC6C,SAAwE3B,QAAtHsD,KAAAxE,cACA4C,GAAA6B,2BAA8C5E,OAAA4E,2BAAoC5E,OAApC4E,2BAAwEvD,QAAtHsD,KAAAxE,cACA4C,GAAA8B,2BAA8C7E,OAAA6E,2BAAoC7E,OAApC6E,2BAAwExD,QAAtHsD,KAAAxE,cACAe,MAA8ClB,OAAAkB,OAA9C,GAAAf,cAEAuD,WAA8C1D,OAAA0D,YAA9C,2BAAAvD,cACAyD,YAA8C5D,OAAA4D,YAAsB5D,OAAA4D,YAAAkB,MAAtB,MAA+D3E,cAA7Ge,OAAAf,cACA4E,WAA8C/E,OAAA+E,WAAsB/E,OAAA+E,WAAAD,MAAtB,MAA+D3E,cAA7Ge,OAAAf,cACAC,cAA8CD,cAAA6E,eAAA,iBAA+C7E,cAA/CC,aAAAD,cAC9CG,aAA8CH,cAAA6E,eAAA,gBAA+C7E,cAA/CG,YAAAH,cAC9C8E,UAA8C9E,cAAA6E,eAAA,aAA+C7E,cAA/C8E,SAAA9E,cAC9C+E,OAA8C/E,cAAA6E,eAAA,UAA+C7E,cAA/C+E,MAAA/E,cAQ9CE,kBAAAA,kBAAAF,cACAI,mBAAAA,mBAAAJ,cACAQ,oBAAAA,oBAAAR,cACAqB,kBAAAA,kBAAArB,cACAD,mBAAAA,mBAAAC,cACAS,WAAAA,WAAAT,cACA8C,SAAAA,SAAA9C,cACAgF,WAAA,GAAAhF,cACAmC,YAAAA,YAAAnC,cACAW,aAAAA,aAAAX,cACAiB,yBAAAA,yBAAAjB,cAEAiF,YAA4B,SAAAC,OAAA,MACrBlF,eAAL+E,OAAAG,MAIUA,OAAR,GAAAlF,cACOmF,cAA6BD,MAA7BA,QAAAE,KAA2C,SAAAC,MAAA,GAAAA,KAC7CC,OAAY,SAAAC,UAAA,MAAYA,UAASvF,cAATe,QAAZmE,QAAZhG,OAAA,IAA+Ec,cAAlFwF,aAAA,MACEH,KAAA,IAEEI,eAAA,OAAAA,aACQzF,cAAZe,OAAmCf,cAAnCgF,WAEOK,KAAAK,OAAPD,iBAXFP,QAAWA,MAAQA,MAARS,eAAA3F,cACJsE,KAAAgB,OAA0B,SAAAM,UAAA,MAAYA,UAAS5F,cAATe,OAAA4E,cAAAE,QAAAX,QAAZ,MAAAlF,cAerC2C,UAA2B,SAAAmD,IAAAC,KAAA,QAMzBrG,YAAAC,OAAAoD,kBAAAzC,OAAA,GACM0F,MAAJlC,IAAAkC,MACA/C,OAAA3C,MAAA0F,KACAC,OAAc,SAAAC,KAAA,MAAOnD,mBAAAoD,QAAP,WAAAH,KACdI,KAAc,SAAAF,KAAA,MAAOnD,mBAAAC,MAAPkD,MAAA,IAThBH,IAAS,MAAA/F,eACTY,iBAAA,CAAA,IAEMyF,UAAY/F,MAAO,QAAAA,SAAA,MAAAwF,MAAApG,YACzB2D,SAAqB,SAAA,oBAArB,QAAA,IAmBIC,UAAA,uFAE0BtD,cAF1BuD,WAAA,wFAAA,QAXJC,kBAAA,MACexD,eAAb4E,WACOlB,OAAc,SAAAC,KAAAC,MAAA,MACZD,OAAA,wEAAAC,KAAA,6FAAAA,KAAP,gCADF,QASF,8TAAArE,WAaAsE,MACUnE,WAAFA,WAAc4D,SAAdA,SAAwBgD,aAnChC,OAmC8CD,QAD9CA,UAAAE,OAAAnB,KAGQ,SAAA9E,OAAAN,cACEsB,YAA2BhB,MAA3BA,QAAA8E,KACE,SAAAoB,oBAAAxG,cACEM,MAAsBkG,mBAAAnB,KAAtBA,KAAA9D,YACAkF,WAAyBD,mBAAAnB,KAAzBA,QAGH,SAAAqB,QAAA,MAAU1G,eAAAM,MAAV,MAAAN,cA2CbY,iBAAA,EAAAd,YAgEAH,OAAoB,SAAAgH,SAAAzF,QAClB0F,QAAAD,QAAyB,SAAAE,IAAA,GACnB9E,SAAUb,QAAAa,QAAA8E,IAAd,EACI9E,SAAA+E,UAAJ,UAAwB/E,QAAA+E,WAAAxD,UAAA,EACtBtD,cACAyC,MAAsBV,QAAtBG,cAAA,IAMF6E,cAAA,uUAGgI/G,cAHhIe,MAAA,IAGuJlB,OAHvJS,MAAA,mDAGsNN,cAHtNgH,OAAA,0RAAA,QAxMJC,oBAAA,GACQC,kBAAmB,QAAnBA,kBAAAC,WAAA,MAAAhD,oBAAgCmB,OAA0B,SAAAhF,OAAA,MAAS6G,YAAT7G,QAA1BpB,OAAb,EAAA,OAAAkI,QAClBC,KAAYxH,OAAZyH,OAAAhC,OAAiC,SAAAhF,OAAA,OAAY4G,iBAAZ5G,SAAjCoD,OAA6E,SAAAC,KAAAC,MAAA,MAAgBD,OAAAC,KAAA,KAAoB/D,OAApB+D,MAAhB,KAApF,OAsME,mEAIkD5D,cAJlDe,MAAA,IAIyElB,OAJzES,MAAA,gFAIqKN,cAJrK8E,SAAA,ksBAUiC9E,cAVjCe,MAAA,IAUwDlB,OAVxDS,MAAJ,izCA6BIiH,sBAAwBjE,SAAA,SAAyHtD,cAAzHyC,MAA5B,UAA4B,mCAAiDzC,cAAjDe,MAAA,0CACxByG,iBAAA,2IAAAD,sBAAA,qYAOuCvH,cAPvCG,YAAJ,2WAAAb,gBAcAmI,IAAA,oBAAuCzH,cAAvCe,MAAA,IAA8DlB,OAA9DS,MAAA,QAAAkH,iBAAA,KAAA,GAEIzF,SAAUb,QAAAa,QAAdgF,cACIW,MAAU3F,QAAA4F,KADd,SAEIC,KAAUhI,SAFdiI,SAGA,QAAMD,KAAA,GAAAd,UAAAc,KAAmCA,KAAzCC,QACA,IAAIC,gBAAiBnI,OAAAoI,QAAeH,KAAAI,KAApC,QAAApI,UAEAqI,OAAgBzI,SAAAuC,SAAhBpC,SAAA4B,YAEoBmG,MAAAhI,WAApB,WACoBwB,QAAAC,KAApBI,aAAAuG,eAEAI,YAAA3G,aAAAA,YAEA4G,qBAAAC,KAAsC,cAAA7G,YAGtC8G,YAAAC,UAAoC,SAAAC,WAAAC,WAAA,OAC3BD,cAAe,gBAAAA,aAAkCA,qBAAjD9G,UAGTrB,sBAECsB,uBAAA/B,OAED8I,OAAc,WAAA,MAAMlH,aAANC,iBAAmC,SAAA7C,GAAA,MAAQqB,eAAAgF,WAA2BzD,YAAnCC,kBAAA,MAAA9B,YAlTnD2D,SAAqB,SAAA,WAAA,SAArB,gBAAAqF,SAqTO,IAAA7G,SAAA,EAAA8G,YAAA,EAAAC,OAAAtI,MAIK,IAAAuI,YAAA,KAAAlH,WAAA,KAAAwD,aAAA,IAAA7D,WAAA,KAAAuB,SAAA,KAAAyB,KAAA,KAAAkB,aAAA,KAAAnF,SAAA,KAAAyI,SAAA,KAAA3I,YAAA,KAAAF,aAAA,KAAA6E,SAAA,KAAAkC,OAAA,KAAAjC,MAJL,MAAAuB,aAAA,gBAAAyC,kBAAA,EAAArJ,WAAPA,YAAAL,UAxTJgE,SAAoB,iBAAA,YAAA,WAApB,YAAAnC,QAkVA9B,OAAA,mBAAA,iBAAA4J,UAAA,iBAAA3J",
  "file": "gumga-many-to-one.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function(){\n    'use strict';\n\n    ManyToOne.$inject = ['$templateCache','$uibModal', '$compile', '$timeout'];\n\n    function ManyToOne($templateCache, $uibModal, $compile, $timeout){\n        controller.$inject = ['$scope', '$element', '$attrs', '$transclude'];\n\n        function controller($scope, $element, $attrs, $transclude){\n          let manyToOneCtrl = this, ngModelCtrl, ngModelCtrlReset\n\n          const ERR_MSGS = {\n            noValue: 'É necessário um atributo value no componente gumgaManyToOne',\n            noField: 'É necessário um atributo field no componente gumgaManyToOne',\n            noSearch: 'É necessário uma função de busca no componente gumgaManyToOne'\n          }\n\n          const possibleAttributes  = ['loadingText', 'onSelect', 'value', 'list', 'searchMethod', 'field', 'onNewValueAdded', 'onValueSelected', 'onValueVisualizationOpened', 'onValueVisualizationClosed', 'tabindex']\n\n          let template = false\n\n          if(!$attrs.value)        console.error(ERR_MSGS.noValue)\n          if(!$attrs.field)        console.error(ERR_MSGS.noField)\n          // if(!$attrs.searchMethod) console.error(ERR_MSGS.noSearch)\n\n          manyToOneCtrl.ev                            = {}\n          manyToOneCtrl.list                          = manyToOneCtrl.list                                                    || []\n          manyToOneCtrl.ev.onNewValueAdded            = $attrs.onNewValueAdded            ? manyToOneCtrl.onNewValueAdded     : angular.noop\n          manyToOneCtrl.ev.onSelect                   = $attrs.onSelect                   ? manyToOneCtrl.onSelect            : angular.noop\n          manyToOneCtrl.ev.onValueVisualizationOpened = $attrs.onValueVisualizationOpened ? $attrs.onValueVisualizationOpened : angular.noop\n          manyToOneCtrl.ev.onValueVisualizationClosed = $attrs.onValueVisualizationClosed ? $attrs.onValueVisualizationClosed : angular.noop\n          manyToOneCtrl.field                         = $attrs.field                                               || ''\n          // manyToOneCtrl.description                   = $attrs.description                                         || false\n          manyToOneCtrl.modalTitle                    = $attrs.modalTitle                                          || 'Visualizador de Registro'\n          manyToOneCtrl.modalFields                   = $attrs.modalFields  ? $attrs.modalFields.split(',')         : [manyToOneCtrl.field]\n          manyToOneCtrl.postFields                    = $attrs.postFields   ? $attrs.postFields.split(',')          : [manyToOneCtrl.field]\n          manyToOneCtrl.displayClear                  = manyToOneCtrl.hasOwnProperty('displayClear') ? manyToOneCtrl.displayClear : true\n          manyToOneCtrl.displayInfo                   = manyToOneCtrl.hasOwnProperty('displayInfo')  ? manyToOneCtrl.displayInfo  : true\n          manyToOneCtrl.editable                      = manyToOneCtrl.hasOwnProperty('editable')     ? manyToOneCtrl.editable     : true\n          manyToOneCtrl.async                         = manyToOneCtrl.hasOwnProperty('async')        ? manyToOneCtrl.async        : true\n          // manyToOneCtrl.showDescripion                = !!manyToOneCtrl.description\n\n          function mirrorAttributes(){\n            const isOneOfPossibles = attribute => possibleAttributes.filter(value => attribute == value).length > 0;\n            return Object.keys($attrs.$attr).filter((value) => !isOneOfPossibles(value)).reduce((prev, next) => prev += `${next}=\"${$attrs[next]}\"`, '');\n          }\n\n          manyToOneCtrl.displayInfoButton   = displayInfoButton\n          manyToOneCtrl.modelValueIsObject  = modelValueIsObject\n          manyToOneCtrl.disabledDisplayInfo = disabledDisplayInfo\n          manyToOneCtrl.displayPlusButton   = displayPlusButton\n          manyToOneCtrl.displayClearButton  = displayClearButton\n          manyToOneCtrl.clearModel          = clearModel\n          manyToOneCtrl.openInfo            = openInfo\n          manyToOneCtrl.valueToAdd          = ''\n          manyToOneCtrl.afterSelect         = afterSelect\n          manyToOneCtrl.openTypehead         = openTypehead\n          manyToOneCtrl.showTypeheadAndHideMatch         = showTypeheadAndHideMatch\n\n          manyToOneCtrl.proxySearch = (param) => {\n            if (!manyToOneCtrl.async) {\n              if (param) param = param.toLowerCase()\n              return manyToOneCtrl.list.filter(listItem => listItem[manyToOneCtrl.field].toLowerCase().indexOf(param) > -1)\n            } else {\n              param = param || ''\n              return manyToOneCtrl.searchMethod({ param }).then(data => {\n                if(data.filter(dataItem => dataItem[manyToOneCtrl.field] == param).length > 0 || !manyToOneCtrl.authorizeAdd){\n                  return data\n                }\n                let objToAppend = {}\n                objToAppend[manyToOneCtrl.field] = manyToOneCtrl.valueToAdd;\n\n                return data.concat(objToAppend)\n              })\n            }\n          }\n\n          manyToOneCtrl.proxySave  = (val, abc) => {\n            if(!abc) return\n            manyToOneCtrl.isTypeaheadOpen = true;\n            const controllerAs = 'ctrl'\n            const resolve = { value: () => val }\n            controller.$inject = ['$scope','$uibModalInstance', 'value']\n            function controller($scope, $uibModalInstance, value){\n              let ctrl = this;\n              ctrl.object = value\n              ctrl.cancel = obj => $uibModalInstance.dismiss('cancel');\n              ctrl.save   = obj => $uibModalInstance.close(obj);\n            }\n\n            function mountModalBody(){\n              let fields = manyToOneCtrl.postFields\n              return fields.reduce((prev, next) => {\n                return prev += `\n                <div class=\"form-group\">\n                  <label>${next}</label>\n                  <input type=\"text\" class=\"form-control\" ng-model=\"ctrl.object.${next}\" />\n                </div>`\n              }, ' ')\n            }\n\n            let template = `\n              <div class=\"modal-header\">\n                <h3 class=\"modal-title\">${manyToOneCtrl.modalTitle}</h3>\n              </div>\n              <div class=\"modal-body\">\n                ${mountModalBody()}\n              </div>\n              <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"ctrl.cancel(ctrl.object)\">Retornar</button>\n                <button type=\"button\" class=\"btn btn-primary\" ng-click=\"ctrl.save(ctrl.object)\">Salvar</button>\n              </div>`\n\n\n            $uibModal\n              .open({ controller, template, controllerAs, resolve })\n              .result\n              .then(value => {\n                      manyToOneCtrl.postMethod({ value }).then(\n                        dataFromPostMethod => {\n                          manyToOneCtrl.value = dataFromPostMethod.data.data\n                          ngModelCtrl.$viewValue = dataFromPostMethod.data.data\n                        }\n                      )\n                    }, reject => manyToOneCtrl.value = '')\n\n          }\n\n          function displayClearButton(){\n            return manyToOneCtrl.displayClear\n          }\n\n          function displayInfoButton(){\n            return manyToOneCtrl.displayInfo\n          }\n\n          function modelValueIsObject(){\n            if (manyToOneCtrl.disabled) return true\n            if (!manyToOneCtrl.value) return true;\n            return !(typeof manyToOneCtrl.value === 'object')\n          }\n\n          function disabledDisplayInfo(){\n            return !(typeof manyToOneCtrl.value === 'object')\n          }\n\n          function clearModel(){\n            manyToOneCtrl.visible = 'typeahead';\n            delete manyToOneCtrl.value;\n          }\n\n          function openTypehead(){\n            if(manyToOneCtrl.isTypeaheadOpen) return;\n            document.getElementById('typeahead-' + manyToOneCtrl.field + '-' + $attrs.value).focus();\n          }\n\n          function showTypeheadAndHideMatch(){\n            manyToOneCtrl.visible = 'typeahead'\n\n            $timeout(()=>{\n              manyToOneCtrl.value = angular.copy(manyToOneCtrl.inputMatchValue);\n              openTypehead();\n              delete manyToOneCtrl.inputMatchValue;\n            })\n\n          }\n\n          manyToOneCtrl.isTypeaheadOpen = true;\n\n          function displayPlusButton(){\n            return manyToOneCtrl.postMethod\n                && (typeof ngModelCtrl.$$rawModelValue === 'string' || ngModelCtrl.$$rawModelValue instanceof String)\n                && ngModelCtrl.$$rawModelValue.length > 0\n          }\n\n          function handlingInputVisible(){\n            if(manyToOneCtrl.inputMatch){\n              let span = document.getElementById('match-'+manyToOneCtrl.field+'-'+$attrs.value);\n              let inputMatch = manyToOneCtrl.inputMatch.replace(/{/g, '{{').replace(/}/g, '}}').replace(/item/g, 'manyToOneCtrl.value');\n              let update = '<span style=\"display: none;\" id=\"match-'+manyToOneCtrl.field+'-'+$attrs.value+'\">'+inputMatch+'</span>';\n              angular.element(span).replaceWith($compile(update)($scope))\n              $timeout(() => {\n                let content = document.getElementById('match-'+manyToOneCtrl.field+'-'+$attrs.value);\n                manyToOneCtrl.inputMatchValue = content.innerHTML;\n                manyToOneCtrl.visible = 'inputMatchValue';\n              });\n            }else{\n              manyToOneCtrl.visible = 'typeahead';\n            }\n          }\n\n          function afterSelect($item, $model, $label, $event, isBtn, match){\n            handlingInputVisible();\n            if(!$model.id) manyToOneCtrl.proxySave($model, isBtn);\n            if(manyToOneCtrl.ev.onSelect) manyToOneCtrl.ev.onSelect({value: $model});\n          }\n\n          function openInfo(object = {}, $event) {\n\n            manyToOneCtrl.isTypeaheadOpen = true;\n            $event.stopImmediatePropagation()\n            $event.preventDefault()\n            controller.$inject = ['$scope','$uibModalInstance']\n\n            function controller($scope, $uibModalInstance){\n              $scope.close = () => $uibModalInstance.close()\n            }\n\n            function mountModalBody(){\n              let fields = manyToOneCtrl.modalFields\n              return fields.reduce((prev, next) => {\n                return prev += `\n                <div class=\"form-group\">\n                  ${ (typeof object[next] === 'string' || object[next] instanceof String) ? `<label>${next}</label>` : ' '}\n                  ${ (typeof object[next] === 'string' || object[next] instanceof String) ? `<input type=\"text\" class=\"form-control\" value=\"${object[next]}\" disabled />` : ' '}\n                </div>`\n              }, ' ')\n            }\n\n            let template = `\n            <div class=\"modal-header\">\n              <h3 class=\"modal-title\">${manyToOneCtrl.modalTitle}</h3>\n            </div>\n            <div class=\"modal-body\">\n              ${mountModalBody()}\n            </div>\n            `\n            $uibModal.open({ controller, template })\n\n          }\n\n          $transclude($scope, cloneEl => {\n            angular.forEach(cloneEl, cl => {\n              let element = angular.element(cl)[0];\n              if (element.nodeName && element.nodeName === 'MATCH') {\n                template = true\n                manyToOneCtrl.match = element.innerHTML\n              }\n            });\n          })\n\n          /*  */\n          let baseTemplate = `\n          <div>\n            <div ng-class=\"{'input-group': (manyToOneCtrl.displayInfoButton() && manyToOneCtrl.modelValueIsObject()) || manyToOneCtrl.displayClearButton()}\">\n              <input type=\"text\" ng-init=\"manyToOneCtrl.visible = 'typeahead'\" ng-show=\"manyToOneCtrl.visible == 'typeahead'\" id=\"typeahead-${manyToOneCtrl.field}-${$attrs.value}\" class=\"form-control gmd inputahead\" tabindex=\"${manyToOneCtrl.tabSeq}\" ng-disabled=\"manyToOneCtrl.disabled\" ng-readonly=\"manyToOneCtrl.readonly\" ng-model=\"manyToOneCtrl.value\" ng-trim=\"true\" uib-typeahead=\"$value as $value[manyToOneCtrl.field] for $value in manyToOneCtrl.proxySearch($viewValue)\" typeahead-loading=\"manyToOneCtrl.typeaheadLoading\" ${mirrorAttributes()}\n                     typeahead-template-url=\"manyToOneTemplate${manyToOneCtrl.field}-${$attrs.value}.html\" typeahead-is-open=\"manyToOneCtrl.isTypeaheadOpen\" typeahead-editable=\"${manyToOneCtrl.editable}\" typeahead-show-hint=\"true\" typeahead-min-length=\"0\" typeahead-on-select=\"manyToOneCtrl.afterSelect($item, $model, $label, $event, 'isNotButton', manyToOneCtrl.match)\" autocomplete=\"off\"/>\n              <input type=\"text\" ng-keyup=\"manyToOneCtrl.showTypeheadAndHideMatch()\" ng-model=\"manyToOneCtrl.inputMatchValue\" class=\"form-control\" ng-show=\"manyToOneCtrl.visible == 'inputMatchValue'\"/>\n              <div ng-show=\"manyToOneCtrl.typeaheadLoading && manyToOneCtrl.loadingText\" style=\"position: absolute; top: 40px;\">\n                <i class=\"glyphicon glyphicon-refresh\"></i>\n                {{manyToOneCtrl.loadingText}}\n              </div>\n              <span ng-hide=\"true\" id=\"match-${manyToOneCtrl.field}-${$attrs.value}\"></span>\n              <div class=\"input-group-btn input-group-btn-icon\" ng-show=\"(manyToOneCtrl.displayInfoButton() && manyToOneCtrl.modelValueIsObject()) || manyToOneCtrl.displayClearButton()\">\n                <button type=\"button\" class=\"btn btn-default gmd\" ng-show=\"!manyToOneCtrl.modelValueIsObject() && manyToOneCtrl.displayClearButton()\" ng-click=\"manyToOneCtrl.clearModel()\">\n                  <span class=\"glyphicon glyphicon-remove\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default gmd\"\n                        ng-show=\"manyToOneCtrl.modelValueIsObject() && manyToOneCtrl.displayClearButton()\"\n                        ng-click=\"manyToOneCtrl.openTypehead()\">\n                  <span class=\"{{!manyToOneCtrl.isTypeaheadOpen ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}}\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default gmd\" ng-show=\"!manyToOneCtrl.modelValueIsObject() && manyToOneCtrl.displayInfoButton()\" ng-disabled=\"manyToOneCtrl.disabledDisplayInfo()\" ng-click=\"manyToOneCtrl.openInfo(manyToOneCtrl.value, $event)\">\n                  <span class=\"glyphicon glyphicon-info-sign\"></span>\n                </button>\n              </div>\n            </div>\n\n          </div>`\n\n\n          let templateForInnerMatch = (!template) ? `<span ng-bind-html=\"match.model.${manyToOneCtrl.field} | uibTypeaheadHighlight:query\"></span>` : `<span>${manyToOneCtrl.match}</span>`\n          let templateForMatch = `\n          <a class=\"col-md-12 result gmd\">\n            <span class=\"col-md-10 str\" ng-click=\"manyToOneCtrl.select()\">\n              ${templateForInnerMatch}\n              <span ng-show=\"$parent.$parent.$parent.$parent.manyToOneCtrl.valueToAdd == match.label && $parent.$parent.$parent.$parent.manyToOneCtrl.valueToAdd.length > 0 && !match.model.id && !!$parent.$parent.$parent.$parent.manyToOneCtrl.authorizeAdd\">(novo)</span><br>\n            </span>\n            <span class=\"col-md-2\">\n              <span class=\"icon text-right\" ng-if=\"${manyToOneCtrl.displayInfo}\" ng-click=\"$parent.$parent.$parent.$parent.manyToOneCtrl.openInfo(match.model, $event)\" ng-hide=\"$parent.$parent.$parent.$parent.manyToOneCtrl.valueToAdd == match.label && !match.label.id\">\n                <span class=\"glyphicon glyphicon-info-sign\"></span>\n              </span>\n            </span>\n            <div class=\"clearfix\"></div>\n          </a>`\n\n          $templateCache.put(`manyToOneTemplate${manyToOneCtrl.field}-${$attrs.value}.html`, templateForMatch)\n\n          let element = angular.element(baseTemplate),\n              input   = element.find('input'),\n              form    = $element.parent()\n          while(form[0].nodeName != 'FORM') form = form.parent();\n          let formController = $scope.$parent[form.attr('name')]\n\n          $element.append($compile(element)($scope))\n\n          ngModelCtrl       = input.controller('ngModel')\n          ngModelCtrlReset  = angular.copy(ngModelCtrl)\n\n          formController.$addControl(ngModelCtrl)\n\n          ngModelCtrl.$viewChangeListeners.push(() => {\n            // console.log('$viewChangeListeners', ngModelCtrl.$viewValue)\n          })\n          ngModelCtrl.$validators.manyToOne = (modelValue, viewValue) => {\n            return modelValue ? !(typeof modelValue === 'string' || modelValue instanceof String) : true\n          }\n\n          if(!modelValueIsObject()){\n             handlingInputVisible();\n          }\n\n          $scope.$watch(() => ngModelCtrl.$$rawModelValue, (i) => (manyToOneCtrl.valueToAdd = ngModelCtrl.$$rawModelValue))\n        }\n\n        return {\n            restrict : 'E',\n            replace: true,\n            transclude: true,\n            scope : {\n              value:            '=',\n              loadingText:      '@?',\n              inputMatch:       '@?',\n              searchMethod:     '&',\n              postMethod:       '&?',\n              onSelect:         '&?',\n              list:             '=?',\n              authorizeAdd:     '=?',\n              disabled:         '=?',\n              readonly:         '=?',\n              displayInfo:      '=?',\n              displayClear:     '=?',\n              editable:         '=?',\n              tabSeq:           '=?',\n              async:            '=?'\n            },\n            controllerAs: 'manyToOneCtrl',\n            bindToController: true,\n            controller\n        }\n    }\n    angular.module('gumga.manytoone', ['ui.bootstrap'])\n      .directive('gumgaManyToOne', ManyToOne);\n})();\n"
  ]
}